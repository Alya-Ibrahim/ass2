# -*- coding: utf-8 -*-
"""part-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dGdx3tcV_5zMtcIFwPZiQF5d6On8txuL
"""

#A function to distribute the chocolates to students iteratively
def distribute_chocolates_iteratively(chocolates, students):
    distributed = {}  #It creates an empty dictionary to store the distribution
    for i, student in enumerate(students):  #A for loop is used to loop over the list of students with an index
        if i < len(chocolates):  #An if-statement to check if there are enough chocolates for the current student
            distributed[student] = chocolates[i]  #Here it assigns the chocolate to the student
        else:
            break  #It uses break which will stop the loop if there are no more chocolates to distribute
    return distributed  #it will return the distribution dictionary

#A function to distribute the chocolates to the students recursively
def distribute_chocolates_recursively(chocolates, students, distributed=None, index=0):
    if distributed is None:
        distributed = {}  #It initializes the distribution dictionary
    if index == len(students) or index == len(chocolates):
        return distributed  # Base case: return distribution if all students or chocolates are processed
    student = students[index]  # Get the current student using the index
    distributed[student] = chocolates[index]  #it assigns the chocolate to the current student
    # Recursively call the function for the next student and the next chocolate
    return distribute_chocolates_recursively(chocolates, students, distributed, index+1)

#A function to run test cases for a given chocolate distribution function (I wrote four test cases)
def run_test_cases(distribute_func):
    # Test Case 1: Is a case where there is a match between the number of students and the number of chocolates
    students = ["Alya", "Hessa", "Najla"] #defining the student's names
    chocolates = [{"type": "Almond", "ID": "001"}, {"type": "Dark", "ID": "002"}, {"type": "Milk", "ID": "003"}]
    print(f"Test Case 1: {distribute_func(chocolates, students)}")  #here it prints the result of the distribution

    # Test Case 2: A case where there are more students than the chocolates that are available
    students = ["Alya", "Hessa", "Najla", "Sarah"]
    chocolates = [{"type": "Almond", "ID": "001"}, {"type": "Dark", "ID": "002"}]
    print(f"Test Case 2: {distribute_func(chocolates, students)}")  #it prints the result of the distribution

    # Test Case 3: A case where there are more chocolates available than students
    students = ["Alya", "Hessa",]
    chocolates = [{"type": "Almond", "ID": "001"}, {"type": "Dark", "ID": "002"}, {"type": "Milk", "ID": "003"}]
    print(f"Test Case 3: {distribute_func(chocolates, students)}")  #it prints the result of the distribution

    # Test Case 4: A case where there are no chocolates to distribute to the students
    students = ["Alya", "Hessa", "Najla",]
    chocolates = []
    print(f"Test Case 4: {distribute_func(chocolates, students)}")  #it prints the result of the distribution

# Execute the test cases for the iterative distribution function
print("Testing Iterative Function:")
run_test_cases(distribute_chocolates_iteratively)

# Execute the test cases for the recursive distribution function
print("\nTesting Recursive Function:")
run_test_cases(distribute_chocolates_recursively)